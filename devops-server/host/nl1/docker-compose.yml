version: "3.8"
services:
  gitlab-runner:
    image: gitlab/gitlab-runner:latest
    container_name: gitlab-runner
    # ports:
    #   - 8093:8093
    volumes:
      - /data/gitlab-runner/config:/etc/gitlab-runner
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always

  squid:
    image: sameersbn/squid:3.5.27-2
    container_name: squid
    ports:
      - 8228:3128
    volumes:
      - /data/squid:/var/spool/squid
      - /data/squid/conf:/etc/squid/squid.conf:ro
      - /data/squid/squid_users:/etc/squid/squid_users:ro
    restart: always

  db:
    image: postgres:12.3
    restart: unless-stopped
    container_name: db
    #  ports:
    #    - 5432:5432
    env_file:
      - secret-env
    volumes:
      - /data/db:/var/lib/postgresql/data
    networks:
      - backend
    logging:
      driver: fluentd

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: unless-stopped
    #  ports:
    #    - 5431:80
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@kaseb.com
    volumes:
      - /data/pgadmin:/var/lib/pgadmin
    env_file:
      - secret-env
    networks:
      - backend
      - publish
    depends_on:
      - db

  pgbackups3:
    image: amirabbas/postgres-backup-s3
    container_name: pgbackups3
    environment:
      - SCHEDULE=@weekly
      - S3_ENDPOINT=https://s3.ir-thr-at1.arvanstorage.com
      - S3_BUCKET=pg-dev-backup
      - S3_PREFIX=backup
      - POSTGRES_HOST=db
      - POSTGRES_DATABASE=kaseb
      - POSTGRES_USER=admin
      - POSTGRES_EXTRA_OPTS=--schema=public --blobs
    env_file:
      - secret-env
    networks:
      - backend
    depends_on:
      - db
    logging:
      driver: fluentd
    # labels:
    #   dozzle: "show logs"

  proxy:
    image: linuxserver/letsencrypt
    container_name: proxy
    cap_add:
      - NET_ADMIN
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
      - URL=mykaseb.ir
      - SUBDOMAINS=pgadmin,dev-api,monitor,dev,log,vid,adminer,kibana
      - ONLY_SUBDOMAINS=true
      - VALIDATION=http
    volumes:
      - /data/proxy:/config
    ports:
      - 443:443
      - 80:80 #optional
    restart: unless-stopped
    networks:
      - publish
    healthcheck:
      test: curl --fail -s localhost || exit 1
      interval: 1m30s
      timeout: 10s
      retries: 3
    depends_on:
      - pgadmin
      - server
      - grafana
      - client
      # - dozzle
      - kibana
    logging:
      driver: fluentd

  server:
    image: registry.gitlab.com/toofun-group/kaseb-server
    container_name: server
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/kaseb
      - SPRING_DATASOURCE_USERNAME=kaseb
    env_file:
      - secret-env
    # ports:
    # - 1212:1212
    restart: always
    healthcheck:
      test: curl --fail -s http://localhost:1212/api/v1/verify || exit 1
      interval: 1m30s
      timeout: 10s
      retries: 3
    networks:
      - backend
      - publish
    depends_on:
      - db
    # labels:
    #   dozzle: "show logs"
    logging:
      driver: fluentd

  client:
    image: registry.gitlab.com/toofun-group/kaseb-web-client
    container_name: client
    environment:
      - PUBLIC_URL=https://dev.mykaseb.ir
    env_file:
      - secret-env
    # ports:
    #   - 8080:80
    networks:
      - publish
    # labels:
    #   dozzle: "show logs"
    logging:
      driver: fluentd

  prometheus:
    image: prom/prometheus:v2.19.2
    container_name: prometheus
    user: "1000:1000"
    # ports:
    #   - 9090:9090
    volumes:
      - /data/prometheus/config:/etc/prometheus/
      - /data/prometheus/data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    depends_on:
      - cadvisor
    networks:
      - monitor
      - backend

  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    # ports:
    #   - 9093:9093
    volumes:
      - /data/alertmanager/:/etc/alertmanager/
    command:
      - "--config.file=/etc/alertmanager/config.yml"
      - "--storage.path=/alertmanager"
    networks:
      - monitor

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.37.0
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    restart: unless-stopped
    networks:
      - monitor

  grafana:
    image: grafana/grafana:7.0.6
    container_name: grafana
    user: "1000:1000"
    volumes:
      - /data/grafana/data:/var/lib/grafana
      - /data/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    env_file:
      - secret-env
    networks:
      - monitor
      - backend
      - publish

  nodeexporter:
    image: prom/node-exporter:v1.0.1
    container_name: nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)"
    networks:
      - monitor
  #  alertmanager-bot:
  #    image: metalmatze/alertmanager-bot:0.4.0
  #    environment:
  #      ALERTMANAGER_URL: http://alertmanager:9093
  #      BOLT_PATH: /data/bot.db
  #      LISTEN_ADDR: 0.0.0.0:8080
  #      STORE: bolt
  #      TELEGRAM_ADMIN: "XXXXXX\XXXXXX"
  #      TELEGRAM_TOKEN: XXXXXXXX:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  #      TEMPLATE_PATHS: /templates/default.tmpl
  #    ports:
  #      - 8282:8080
  #    networks:
  #      - back-tier
  #    depends_on:
  #      - alertmanager
  #    volumes:
  #    - ./srv/monitoring/alertmanager-bot:/data
  # dozzle:
  # container_name: dozzle
  # image: amir20/dozzle:latest
  # # ports:
  # #   - 9999:8080
  # volumes:
  #   - /var/run/docker.sock:/var/run/docker.sock
  # environment:
  #   - DOZZLE_FILTER=label=dozzle
  # networks:
  #   - publish

  adminer:
    container_name: adminer
    image: adminer
    restart: always
    # ports:
    #   - 8080:8080
    networks:
      - publish

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.8.1
    # ports:
    #   - 5601:5601
    environment:
      SERVER_NAME: kibana.mykaseb.ir
      ELASTICSEARCH_HOSTS: http://37.152.187.66:9200
      ELASTICSEARCH_USERNAME: elastic
    env_file:
      - secret-env
    networks:
      - publish

  fluentbit:
    container_name: fluentbit
    image: fluent/fluent-bit:1.5
    ports:
      - "127.0.0.1:24224:24224"
      - "127.0.0.1:24224:24224/udp"
    volumes:
      - /data/fluent/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro

networks:
  publish:
  backend:
  monitor:
